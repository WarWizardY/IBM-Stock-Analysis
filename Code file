# Install libraries
!pip install yfinance
!pip install bs4
!pip install nbformat
!pip install --upgrade plotly

# Import libraries
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio
import warnings
from IPython.display import display, HTML

# Show plots inside notebook
pio.renderers.default = "iframe"

# Ignore warnings
warnings.filterwarnings("ignore", category=FutureWarning)

# Function to show price and revenue graph
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False, height=900, title=stock, xaxis_rangeslider_visible=True)
    fig.show()
    fig_html = fig.to_html()
    display(HTML(fig_html))

# Get Tesla stock data
Tesla = yf.Ticker("TSLA")
tesla_data = Tesla.history(period="max")
tesla_data.reset_index(inplace=True)
print(tesla_data.head())

# Get Tesla revenue table from website
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(URL).text
soup = BeautifulSoup(html_data, "html.parser")

# Make empty table for Tesla revenue
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])

# Find correct table
tables = soup.find_all("table")
for table in tables:
    if "Tesla Revenue" in table.text:
        print(table)
        t = table
        break

# Read revenue data
t = tables[1]
for row in t.find_all("tr"):
    col = row.find_all("td")
    if col:
        Date = col[0].text.strip()
        Revenue = col[1].text.strip()
        tesla_revenue = pd.concat([tesla_revenue, pd.DataFrame({"Date": [Date], "Revenue": [Revenue]})], ignore_index=True)

print(tesla_revenue.head())

# Clean revenue column
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"",regex=True)
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

tesla_revenue.tail()

# Get Gamestop stock data
Gamestop = yf.Ticker("GME")
gme_data = Gamestop.history(period="max")
gme_data.reset_index(inplace=True)
print(gme_data.head())

# Get Gamestop revenue from website
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data_2 = requests.get(URL).text
soup = BeautifulSoup(html_data_2, "html.parser")

# Make empty table for Gamestop revenue
gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])
tables = soup.find_all("table")
t = tables[0]

# Read revenue data
for rows in t.find_all("tr"):
    cols = rows.find_all("td")
    if cols:
        Date = cols[0].text.strip()
        Revenue = cols[1].text.replace("$", "").replace(",", "").strip()
        gme_revenue = pd.concat([gme_revenue, pd.DataFrame({"Date": [Date], "Revenue": [Revenue]})], ignore_index=True)

print(gme_revenue.head())
print(gme_revenue.tail())

# Show Tesla and Gamestop graphs
make_graph(tesla_data, tesla_revenue, "Tesla Stocks")
make_graph(gme_data, gme_revenue, "Gamestop")
